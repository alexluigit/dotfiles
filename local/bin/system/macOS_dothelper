#!/bin/sh
[[ -d $DOTPATH ]] || { echo "$DOTPATH is not a directory."; exit 1; }
CONFIG_DIR="$DOTPATH/config"
ETC_DIR="$DOTPATH/etc"
DATA_DIR="$DOTPATH/local/share"
CONFIG_TARGET="$HOME/.config"
DATA_TARGET="$HOME/.local/share"

__link() {
  local admin="$3"
  [[ -f $1 ]] || [[ -d $1 ]] && eval "$admin ln -sf $1 $2";
  [[ $? == 0 ]] && echo "Symlinked $1 => $2"
}

# TODO: setup cronjob
_init() {
  echo "Repository Directory: $DOTPATH"
  [[ ! -d $CONFIG_TARGET ]] && mkdir $CONFIG_TARGET || echo "Using '$HOME/.config'"
  echo "Checking zshenv..."
  sudo ln -s $ETC_DIR/zsh/.zshenv /etc/zshenv
}

_default() {
  for i in $(du -d 1 "$CONFIG_DIR" | cut -f2); do __link $i $CONFIG_TARGET; done
  rm $CONFIG_TARGET/config
  __link $CONFIG_TARGET/ssh ~/.ssh && rm ~/.ssh/ssh 2>/dev/null
  __link $CONFIG_DIR/fd/root /.fdignore sudo
}

mpv() {
  cd ~;
  git clone --depth 1 https://github.com/mpv-player/mpv mpv-repo;
  cd mpv-repo;
  meson setup build
  meson compile -C build
  ./build/mpv --version
  ./TOOLS/osxbundle.py --skip-deps build/mpv
  cp -r ./build/mpv.app /Applications
  cd ~;
  git clone --depth 1 https://github.com/jonniek/mpv-playlistmanager
  git clone --depth 1 https://github.com/mochaaP/mpv_thumbnail_script
  cd mpv_thumbnail_script
  python3 concat_files.py cat_osc.json; python3 concat_files.py cat_server.json
  fd "" --type l | xargs "rm"
  cp ~/mpv_thumbnail_script/mpv_thumbnail_script_{client_osc,server}.lua ~/.config/mpv/scripts
  cp ~/mpv-playlistmanager/playlistmanager.lua ~/.config/mpv/scripts
  cp ~/mpv-repo/TOOLS/lua/autoload.lua ~/.config/mpv/scripts
  ln -sf /Applications/mpv.app/Contents/MacOS/mpv ~/.local/bin
  rm -rf ~/mpv{-repo,-playlistmanager,_thumbnail_script}
}

emacs() {
  cd ~/Code/emacs
  git pull
  ./autogen.sh
  ./configure --with-mailutils
  make -j8 && make install
  cp -f -r ./nextstep/Emacs.app /Applications
  ln -sf /Applications/Emacs.app/Contents/MacOS/Emacs ~/.local/bin/emacs
  ln -sf /Applications/Emacs.app/Contents/MacOS/bin/emacsclient ~/.local/bin
}

update() {
  cd $DOTPATH
  git submodule init && git submodule update --recursive --remote
  echo "All submodule updated."; cd -
}

_init
[[ -z "$@" ]] && _default || "$@"
